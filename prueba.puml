@startuml OKDiario
set namespaceSeparator ::

class "proyecto::main.dart::MyApp" {
  +Widget build()
}

"flutter::src::widgets::framework.dart::StatelessWidget" <|-- "proyecto::main.dart::MyApp"

class "proyecto::screens::register.dart::Register" {
  +State<Register> createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "proyecto::screens::register.dart::Register"

class "proyecto::screens::register.dart::_LoginState" {
  +TextEditingController userName
  +TextEditingController userSecondName
  +TextEditingController password
  +TextEditingController repeatPassword
  +TextEditingController email
  +bool visible
  +bool visible2
  +bool emailOK
  +bool passwordOK
  +void dispose()
  +Widget build()
}

"proyecto::screens::register.dart::_LoginState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"flutter::src::widgets::framework.dart::State" <|-- "proyecto::screens::register.dart::_LoginState"

class "proyecto::screens::main_screen.dart::MainScreen" {
  +Widget build()
}

"flutter::src::widgets::framework.dart::StatelessWidget" <|-- "proyecto::screens::main_screen.dart::MainScreen"

class "proyecto::screens::task_editor.dart::TaskEditor" {
  +TaskEditorState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "proyecto::screens::task_editor.dart::TaskEditor"

class "proyecto::screens::task_editor.dart::TaskEditorState" {
  -Widget _getTaskEditor()
  +Widget build()
}

"flutter::src::widgets::framework.dart::State" <|-- "proyecto::screens::task_editor.dart::TaskEditorState"

class "proyecto::screens::provider.dart::UserProvider" {
  {static} -UserProvider _instance
  -String _userKey
  +String userKey
  +void setUserKey()
}

"proyecto::screens::provider.dart::UserProvider" o-- "proyecto::screens::provider.dart::UserProvider"
"flutter::src::foundation::change_notifier.dart::ChangeNotifier" <|-- "proyecto::screens::provider.dart::UserProvider"

class "proyecto::screens::video_saver.dart::VideoSaver" {
  +State<VideoSaver> createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "proyecto::screens::video_saver.dart::VideoSaver"

class "proyecto::screens::video_saver.dart::_VideoSaverState" {
  +TextEditingController url
  +TextEditingController title
  +File? galleryFile
  +ImagePicker picker
  +bool chargeVideo
  -VideoPlayerController _controller
  +void dispose()
  +dynamic getVideoIndex()
  +Widget build()
}

"proyecto::screens::video_saver.dart::_VideoSaverState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"proyecto::screens::video_saver.dart::_VideoSaverState" o-- "dart::io::File"
"proyecto::screens::video_saver.dart::_VideoSaverState" o-- "image_picker::image_picker.dart::ImagePicker"
"proyecto::screens::video_saver.dart::_VideoSaverState" o-- "video_player::video_player.dart::VideoPlayerController"
"flutter::src::widgets::framework.dart::State" <|-- "proyecto::screens::video_saver.dart::_VideoSaverState"

class "proyecto::screens::calendar.dart::LoadDataFromFireBase" {
  +Widget build()
}

"flutter::src::widgets::framework.dart::StatelessWidget" <|-- "proyecto::screens::calendar.dart::LoadDataFromFireBase"

class "proyecto::screens::calendar.dart::LoadDataFromFireStore" {
  +String? userKey
  +LoadDataFromFireStoreState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "proyecto::screens::calendar.dart::LoadDataFromFireStore"

class "proyecto::screens::calendar.dart::LoadDataFromFireStoreState" {
  -CalendarController? _controller
  -List<String>? _eventNameCollection
  +DataSnapshot? querySnapshot
  +dynamic data
  +String? dayText
  +String? nextDayText
  +void initState()
  +dynamic loadData()
  +Widget appBar()
  +Widget addButton()
  +Widget build()
  -Widget _showCalendar()
  +void onCalendarTapped()
  -void _initializeEventColor()
  +List<Meeting> getMeetingDetails()
}

"proyecto::screens::calendar.dart::LoadDataFromFireStoreState" o-- "syncfusion_flutter_calendar::src::calendar::common::calendar_controller.dart::CalendarController"
"proyecto::screens::calendar.dart::LoadDataFromFireStoreState" o-- "firebase_database::firebase_database.dart::DataSnapshot"
"flutter::src::widgets::framework.dart::State" <|-- "proyecto::screens::calendar.dart::LoadDataFromFireStoreState"

class "proyecto::screens::calendar.dart::MeetingDataSource" {
  +DateTime getStartTime()
  +DateTime getEndTime()
  +bool isAllDay()
  +String getSubject()
  +Color getColor()
  +List<Object> getResourceIds()
  +String getNotes()
  +String getRecurrenceRule()
}

"syncfusion_flutter_calendar::src::calendar::appointment_engine::calendar_datasource.dart::CalendarDataSource" <|-- "proyecto::screens::calendar.dart::MeetingDataSource"

class "proyecto::screens::calendar.dart::DataSource" {
}

"syncfusion_flutter_calendar::src::calendar::appointment_engine::calendar_datasource.dart::CalendarDataSource" <|-- "proyecto::screens::calendar.dart::DataSource"

class "proyecto::screens::calendar.dart::Meeting" {
  +DateTime from
  +DateTime to
  +String eventName
  +Color background
  +bool isAllDay
  +bool notification
  +String startTimeZone
  +String endTimeZone
  +String description
  +String key
  +String recurrenceRule
}

"proyecto::screens::calendar.dart::Meeting" o-- "dart::ui::Color"
"syncfusion_flutter_calendar::src::calendar::appointment_engine::appointment.dart::Appointment" <|-- "proyecto::screens::calendar.dart::Meeting"

class "proyecto::screens::calendar.dart::AppointmentEditor" {
  +AppointmentEditorState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "proyecto::screens::calendar.dart::AppointmentEditor"

class "proyecto::screens::calendar.dart::AppointmentEditorState" {
  +String? key
  +String getByday()
  +int getDiff()
  +int generateUniqueId()
  -Widget _getAppointmentEditor()
  +Widget build()
  +String getTitle()
}

"flutter::src::widgets::framework.dart::State" <|-- "proyecto::screens::calendar.dart::AppointmentEditorState"

class "proyecto::screens::calendar.dart::_TimeZonePicker" {
  +State<StatefulWidget> createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "proyecto::screens::calendar.dart::_TimeZonePicker"

class "proyecto::screens::calendar.dart::_TimeZonePickerState" {
  +Widget build()
}

"flutter::src::widgets::framework.dart::State" <|-- "proyecto::screens::calendar.dart::_TimeZonePickerState"

class "proyecto::screens::calendar.dart::_ColorPicker" {
  +State<StatefulWidget> createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "proyecto::screens::calendar.dart::_ColorPicker"

class "proyecto::screens::calendar.dart::_ColorPickerState" {
  +Widget build()
}

"flutter::src::widgets::framework.dart::State" <|-- "proyecto::screens::calendar.dart::_ColorPickerState"

class "proyecto::screens::calendar.dart::_DayPicker" {
  +State<StatefulWidget> createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "proyecto::screens::calendar.dart::_DayPicker"

class "proyecto::screens::calendar.dart::_DayPickerState" {
  -List<bool> _selectedDays
  +void initState()
  +void initializeDays()
  +String getByday()
  +String getDayName()
  +Widget build()
}

"flutter::src::widgets::framework.dart::State" <|-- "proyecto::screens::calendar.dart::_DayPickerState"

class "proyecto::screens::home_estudent.dart::StudentView" {
  +int page
  +_StudentView createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "proyecto::screens::home_estudent.dart::StudentView"

class "proyecto::screens::home_estudent.dart::_StudentView" {
  +int currentPageIndex
  +List<Color> colorList
  -PageController? _pageController
  -List<Widget Function()> _widgetOptions
  +int dailyPoints
  +int totalPoints
  +int globalPoints
  +int numQuestions
  +bool completed
  +int aux
  +int racha
  +List<Map<dynamic, dynamic>> todayAchivements
  +void initState()
  +void dispose()
  -void _onItemTapped()
  +void updateDependencies()
  +void getToken()
  +int getWeekNumber()
  +dynamic getPuntos()
  +dynamic getPuntosTotales()
  +dynamic getGlobalPuntuation()
  +dynamic initializeParameters()
  +dynamic getAnswers()
  +Widget testTendencie()
  +int checkQuestion()
  +dynamic updateGlobalPoints()
  +dynamic updatePuntosTotales()
  +dynamic updatePuntos()
  +dynamic checkCompleteQuestion()
  +dynamic updateRachaPoints()
  +dynamic getNumQuestions()
  +dynamic getRacha()
  +dynamic getMaxRacha()
  +dynamic getAvatar()
  +dynamic getLogros()
  +dynamic updateLogros()
  +dynamic checkCompleteLogros()
  +dynamic getPointsChart()
  +Widget homePage()
  +Widget ranking()
  +Widget profile()
  +Widget progress()
  +Widget build()
  +dynamic listQuestions()
}

"proyecto::screens::home_estudent.dart::_StudentView" o-- "flutter::src::widgets::page_view.dart::PageController"
"flutter::src::widgets::framework.dart::State" <|-- "proyecto::screens::home_estudent.dart::_StudentView"

class "proyecto::screens::app_lifecycle.dart::LifeCycleHandler" {
  +dynamic Function() resumenCallBack
  +dynamic didChangeAppLifecycleState()
}

"proyecto::screens::app_lifecycle.dart::LifeCycleHandler" o-- "flutter::src::foundation::basic_types.dart::dynamic Function()"
"flutter::src::widgets::binding.dart::WidgetsBindingObserver" <|-- "proyecto::screens::app_lifecycle.dart::LifeCycleHandler"

class "proyecto::screens::home_teacher.dart::TeacherView" {
  +State<TeacherView> createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "proyecto::screens::home_teacher.dart::TeacherView"

class "proyecto::screens::home_teacher.dart::_TeacherViewState" {
  +Widget teacherView()
  +Widget build()
}

"flutter::src::widgets::framework.dart::State" <|-- "proyecto::screens::home_teacher.dart::_TeacherViewState"

class "proyecto::screens::notification_provider.dart::NotificationProvider" {
  {static} -NotificationProvider _instance
  +void setNewNotification()
  +void initNotifications()
}

"proyecto::screens::notification_provider.dart::NotificationProvider" o-- "proyecto::screens::notification_provider.dart::NotificationProvider"
"flutter::src::foundation::change_notifier.dart::ChangeNotifier" <|-- "proyecto::screens::notification_provider.dart::NotificationProvider"

class "proyecto::screens::task.dart::LoadTasks" {
  +Widget build()
}

"flutter::src::widgets::framework.dart::StatelessWidget" <|-- "proyecto::screens::task.dart::LoadTasks"

class "proyecto::screens::task.dart::LoadTasksData" {
  +String? userKey
  +LoadTasksDataFromFireBase createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "proyecto::screens::task.dart::LoadTasksData"

class "proyecto::screens::task.dart::LoadTasksDataFromFireBase" {
  +DataSnapshot? querySnapshot
  +dynamic data
  +String? dayText
  +void initState()
  +dynamic compareDates()
  +Widget build()
  +Widget listItem()
}

"proyecto::screens::task.dart::LoadTasksDataFromFireBase" o-- "firebase_database::firebase_database.dart::DataSnapshot"
"flutter::src::widgets::framework.dart::State" <|-- "proyecto::screens::task.dart::LoadTasksDataFromFireBase"

class "proyecto::screens::questions.dart::Questions" {
  +_Questions createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "proyecto::screens::questions.dart::Questions"

class "proyecto::screens::questions.dart::_Questions" {
  +int cont
  +TextEditingController respuesta
  +List<String?> isChecked
  +List<bool?> imageIsMarked
  +int? currentIndex
  -PageController? _pageController
  +List<int?> selectedImages
  +void initState()
  +void dispose()
  +dynamic getNumAnswers()
  +int getWeekNumber()
  +dynamic getImageName()
  +dynamic updatePuntosTotales()
  +dynamic updatePuntos()
  +dynamic updateGlobalPoints()
  +dynamic saveAnswer()
  +dynamic listQuestions()
  +Widget writeField()
  +Widget completeButton()
  +Widget testQuestion()
  +Widget circleQuestion()
  +Widget writeQuestion()
  +Widget build()
  +dynamic showRightDialog()
}

"proyecto::screens::questions.dart::_Questions" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"proyecto::screens::questions.dart::_Questions" o-- "flutter::src::widgets::page_view.dart::PageController"
"flutter::src::widgets::framework.dart::State" <|-- "proyecto::screens::questions.dart::_Questions"

class "proyecto::screens::home_selection.dart::HomeSelection" {
  +State<HomeSelection> createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "proyecto::screens::home_selection.dart::HomeSelection"

class "proyecto::screens::home_selection.dart::_HomeSelectionState" {
  +String? userType
  +dynamic handleBackgroundMessage()
  +void initState()
  -void _refreshContent()
  +dynamic checkHour()
  +dynamic getUserType()
  +Widget build()
}

"flutter::src::widgets::framework.dart::State" <|-- "proyecto::screens::home_selection.dart::_HomeSelectionState"

class "proyecto::screens::login.dart::Login" {
  +State<Login> createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "proyecto::screens::login.dart::Login"

class "proyecto::screens::login.dart::_LoginState" {
  +TextEditingController userName
  +TextEditingController password
  +bool visible
  +void initState()
  +void dispose()
  +void loadData()
  +Widget build()
}

"proyecto::screens::login.dart::_LoginState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"flutter::src::widgets::framework.dart::State" <|-- "proyecto::screens::login.dart::_LoginState"

class "proyecto::screens::videos.dart::Videos" {
  +_Videos createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "proyecto::screens::videos.dart::Videos"

class "proyecto::screens::videos.dart::_Videos" {
  +List<VideoPlayerController> controllers
  +List<String> videoTitles
  +List<String> videoKeys
  +File? galleryFile
  +ImagePicker picker
  +void showPicker()
  +dynamic getVideoFromGallery()
  +dynamic getUrls()
  +void initState()
  +void dispose()
  +Widget getVideos()
  +Widget build()
  +dynamic showDelete()
}

"proyecto::screens::videos.dart::_Videos" o-- "dart::io::File"
"proyecto::screens::videos.dart::_Videos" o-- "image_picker::image_picker.dart::ImagePicker"
"flutter::src::widgets::framework.dart::State" <|-- "proyecto::screens::videos.dart::_Videos"

class "proyecto::screens::avatar.dart::Avatar" {
  +int avatarSelected
  +_Avatar createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "proyecto::screens::avatar.dart::Avatar"

class "proyecto::screens::avatar.dart::_Avatar" {
  +int totalPoints
  +List<bool> seleccionado
  +int? currentSelected
  +void initState()
  +dynamic getUnlockAvatars()
  +dynamic updatePuntosTotales()
  +dynamic getPuntosTotales()
  +dynamic showBuyConfirmation()
  +dynamic showNotPoints()
  +Widget getAvatar()
  +Widget build()
}

"flutter::src::widgets::framework.dart::State" <|-- "proyecto::screens::avatar.dart::_Avatar"

class "proyecto::screens::google_calendar.dart::GoogleApiService" {
  -GoogleSignIn _googleSignIn
  -GoogleSignInAccount? _currentUser
  +GoogleSignInAccount? currentUser
  +dynamic initializeGoogleSignIn()
  +dynamic getGoogleEventsData()
}

"proyecto::screens::google_calendar.dart::GoogleApiService" o-- "google_sign_in::google_sign_in.dart::GoogleSignIn"
"proyecto::screens::google_calendar.dart::GoogleApiService" o-- "google_sign_in::google_sign_in.dart::GoogleSignInAccount"

class "proyecto::screens::google_calendar.dart::GoogleDataSource" {
  +DateTime getStartTime()
  +bool isAllDay()
  +DateTime getEndTime()
  +String getLocation()
  +String getNotes()
  +String getSubject()
}

"syncfusion_flutter_calendar::src::calendar::appointment_engine::calendar_datasource.dart::CalendarDataSource" <|-- "proyecto::screens::google_calendar.dart::GoogleDataSource"

class "proyecto::screens::google_calendar.dart::GoogleAPIClient" {
  -Map<String, String> _headers
  +dynamic send()
  +dynamic head()
}

"http::src::io_client.dart::IOClient" <|-- "proyecto::screens::google_calendar.dart::GoogleAPIClient"

class "proyecto::services::snackBar.dart::SnackBarService" {
  +GlobalKey<ScaffoldMessengerState> scaffoldKey
  +void showSnackBar()
  +void showTopSnackBar()
  +void removeSnackBar()
}

"proyecto::services::snackBar.dart::SnackBarService" o-- "flutter::src::widgets::framework.dart::GlobalKey<ScaffoldMessengerState>"

class "proyecto::services::notifications.dart::NotificationService" {
  +FlutterLocalNotificationsPlugin flutterLocalNotificationsPlugin
  +dynamic initNotifications()
  +dynamic notificationsDetails()
  +dynamic showNotification()
  +dynamic scheduleNotification()
  +dynamic periodicDailyNotification()
  +dynamic periodicHourNotification()
  +dynamic periodicWeeklyNotification()
  +dynamic getActiveNotifications()
  -dynamic _getActiveNotificationsDialogContent()
  -dynamic _getActiveNotificationMessagingStyle()
  -String _formatPerson()
  -String _formatAndroidIcon()
  +dynamic checkPendingNotificationRequests()
  +dynamic cancelAllNotifications()
  +dynamic cancelSpecificNotifications()
}

"proyecto::services::notifications.dart::NotificationService" o-- "flutter_local_notifications::src::flutter_local_notifications_plugin.dart::FlutterLocalNotificationsPlugin"

class "proyecto::models::students_model.dart::Student" {
  +String name
  +String phone
  +Map<dynamic, dynamic> toJson()
}

class "proyecto::models::task_model.dart::Task" {
  +String name
  +String description
  +Map<dynamic, dynamic> toJson()
}

class "proyecto::widgets::widget_top_home.dart::TopBarHome" {
  +Size preferredSize
  +bool arrow
  +Widget build()
}

"proyecto::widgets::widget_top_home.dart::TopBarHome" o-- "dart::ui::Size"
"flutter::src::widgets::framework.dart::StatelessWidget" <|-- "proyecto::widgets::widget_top_home.dart::TopBarHome"
"flutter::src::widgets::preferred_size.dart::PreferredSizeWidget" <|-- "proyecto::widgets::widget_top_home.dart::TopBarHome"

class "proyecto::widgets::widget_top_login.dart::TopBarLogin" {
  +Size preferredSize
  +bool arrow
  +Widget build()
}

"proyecto::widgets::widget_top_login.dart::TopBarLogin" o-- "dart::ui::Size"
"flutter::src::widgets::framework.dart::StatelessWidget" <|-- "proyecto::widgets::widget_top_login.dart::TopBarLogin"
"flutter::src::widgets::preferred_size.dart::PreferredSizeWidget" <|-- "proyecto::widgets::widget_top_login.dart::TopBarLogin"

class "proyecto::widgets::widget_top_initial.dart::TopBarInitial" {
  +Size preferredSize
  +bool arrow
  +State<TopBarInitial> createState()
}

"proyecto::widgets::widget_top_initial.dart::TopBarInitial" o-- "dart::ui::Size"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "proyecto::widgets::widget_top_initial.dart::TopBarInitial"
"flutter::src::widgets::preferred_size.dart::PreferredSizeWidget" <|-- "proyecto::widgets::widget_top_initial.dart::TopBarInitial"

class "proyecto::widgets::widget_top_initial.dart::_TopBarInitialState" {
  +Widget build()
}

"flutter::src::widgets::framework.dart::State" <|-- "proyecto::widgets::widget_top_initial.dart::_TopBarInitialState"

class "proyecto::widgets::widget_top_homeStudent.dart::TopBarStudentHome" {
  +Size preferredSize
  +bool arrow
  +int backIndex
  +Route<dynamic> customChangeView()
  +Widget build()
}

"proyecto::widgets::widget_top_homeStudent.dart::TopBarStudentHome" o-- "dart::ui::Size"
"flutter::src::widgets::framework.dart::StatelessWidget" <|-- "proyecto::widgets::widget_top_homeStudent.dart::TopBarStudentHome"
"flutter::src::widgets::preferred_size.dart::PreferredSizeWidget" <|-- "proyecto::widgets::widget_top_homeStudent.dart::TopBarStudentHome"


@enduml